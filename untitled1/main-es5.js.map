{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/chart/chart.component.ts","webpack:///src/app/chart/chart.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","httpService","station","state","river","filteredArrRivers","displayedColumns","stationOptions","stateOptions","riverOptions","riverFilteredOptions","fillOptions","subscribeApi","console","log","get","headers","subscribe","data","arrRivers","i","length","includes","stacja","push","wojew√≥dztwo","rzeka","sort","a","b","localeCompare","returnData","dataSource","searchRiver","selector","templateUrl","styleUrls","AppModule","forRoot","echarts","declarations","imports","providers","bootstrap","ChartComponent","initOpts","renderer","width","height","options","color","tooltip","trigger","axisPointer","type","grid","left","right","bottom","containLabel","xAxis","axisTick","alignWithLabel","yAxis","series","name","barWidth","ec","echartsInstance","onChartInit","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {Component, NgModule, OnInit, ViewChild} from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport { EChartsOption } from 'echarts';\r\nimport {MatTab} from '@angular/material/tabs';\r\nimport { observable, computed } from 'mobx-angular';\r\nimport {MatToolbar} from '@angular/material/toolbar';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\n\r\n// @NgModule({\r\n//   imports: [MobxAngularModule]\r\n// })\r\nexport class AppComponent implements OnInit{\r\n\r\n  station = '';\r\n  state = '';\r\n  river = '';\r\n\r\n\r\n  arrRivers: string [];\r\n  filteredArrRivers: string[] = ['rzeka'];\r\n  displayedColumns: string[] = ['stacja', 'rzeka', 'stan', 'temp', 'data'];\r\n\r\n  stationOptions: string[] = [];\r\n  stateOptions: string[] = [];\r\n  riverOptions: string[] = [];\r\n  riverFilteredOptions: string[] = [];\r\n  dataSource: MatTableDataSource<string>;\r\n\r\n  constructor(private httpService: HttpClient) { }\r\n  inputStation(station: string) {\r\n    this.station = station;\r\n  }\r\n  inputState(state: any) {\r\n    this.state = state;\r\n  }\r\n  inputRiver(river: any) {\r\n    this.river = river;\r\n  }\r\n  ngOnInit(){\r\n    this.fillOptions();\r\n    this.subscribeApi();\r\n    console.log(this.subscribeApi());\r\n\r\n  }\r\n  fillOptions(){\r\n    this.riverOptions = [];\r\n    this.httpService.get('https://danepubliczne.imgw.pl/api/data/hydro/',{\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    }).subscribe(\r\n      data => {\r\n        this.arrRivers = data as string [];\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < this.arrRivers.length; i++) {\r\n          // @ts-ignore\r\n          if (!this.stationOptions.includes(this.arrRivers[i].stacja)) {\r\n            // @ts-ignore\r\n            this.stationOptions.push(this.arrRivers[i].stacja);\r\n          }\r\n          // @ts-ignore\r\n          if (!this.stateOptions.includes(this.arrRivers[i].wojew√≥dztwo)) {\r\n            // @ts-ignore\r\n            this.stateOptions.push(this.arrRivers[i].wojew√≥dztwo);\r\n          }\r\n          // @ts-ignore\r\n          if (!this.riverOptions.includes(this.arrRivers[i].rzeka) && this.arrRivers[i].wojew√≥dztwo === this.state) {\r\n            console.log(this.state);\r\n            // @ts-ignore\r\n            this.riverOptions.push(this.arrRivers[i].rzeka);\r\n          }\r\n        }\r\n        this.stateOptions.sort((a, b) => a.localeCompare(b));\r\n        this.riverOptions.sort((a, b) => a.localeCompare(b));\r\n      }\r\n    );\r\n  }\r\n  subscribeApi(): string[]{\r\n    let returnData: string[];\r\n    this.httpService.get('./assets/json/response.json').subscribe(\r\n      data => {\r\n        returnData = data as string[];\r\n        console.log(data as string[]);\r\n      }\r\n    );\r\n    return returnData;\r\n  }\r\n  searchRiver() {\r\n    this.dataSource = new MatTableDataSource([]);\r\n    this.filteredArrRivers = [];\r\n    this.httpService.get('https://danepubliczne.imgw.pl/api/data/hydro/', {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }).subscribe(\r\n      data => {\r\n        this.arrRivers = data as string[];\r\n      }\r\n    );\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < this.arrRivers.length; i++){\r\n      // @ts-ignore\r\n      if (this.state === this.arrRivers[i].wojew√≥dztwo && this.river === this.arrRivers[i].rzeka){\r\n        this.filteredArrRivers.push(this.arrRivers[i]);\r\n      }\r\n    }\r\n    this.dataSource = new MatTableDataSource(this.filteredArrRivers);\r\n    console.log();\r\n    }\r\n  }\r\n\r\n\r\n","<!--The content below is only a placeholder and can be replaced.-->\r\n<meta charset=\"UTF-8\">\r\n\r\n<mat-toolbar>\r\n\r\n  <span>RiverStatusPoland</span>\r\n\r\n  <span class=\"items\"> ITEMS </span>\r\n\r\n</mat-toolbar>\r\n{{this.state}}\r\n<mat-form-field [style.width.%]=\"100\"  >\r\n  <mat-autocomplete #stateAutoComplete=\"matAutocomplete\">\r\n    <mat-option *ngFor=\"let option of stateOptions\" [value]=\"option\">{{option}}</mat-option>\r\n  </mat-autocomplete>\r\n\r\n  <mat-label>Wybierz wojew√≥dztwo </mat-label>\r\n  <label>\r\n    <input matInput [(ngModel)]=\"state\" [matAutocomplete]=\"stateAutoComplete\" name=\"inputState\">\r\n  </label>\r\n</mat-form-field>\r\n\r\n<mat-form-field [style.width.%]=\"100\" (click)=\"this.fillOptions()\" >\r\n  <mat-autocomplete #riverAutoComplete=\"matAutocomplete\">\r\n    <mat-option *ngFor=\"let option of riverOptions\" [value]=\"option\">{{option}}</mat-option>\r\n  </mat-autocomplete>\r\n\r\n  <mat-label>Wybierz rzeke</mat-label>\r\n  <label>\r\n    <input matInput [(ngModel)]=\"river\" [matAutocomplete]=\"riverAutoComplete\" name=\"inputState\">\r\n  </label>\r\n</mat-form-field>\r\n\r\n<div class=\"mat-display-1\">\r\n\r\n    <p>≈πr√≥d≈Çem pochodzenia danych jest Instytut Meteorologii i Gospodarki Wodnej ‚Äì Pa≈Ñstwowy Instytut Badawczy\r\n    </p>\r\n    <p>Dane Instytutu Meteorologii i Gospodarki Wodnej ‚Äì Pa≈Ñstwowego Instytutu Badawczego zosta≈Çy przetworzone\r\n    </p>\r\n\r\n</div>\r\n\r\n\r\n<div class=\"button-search\"> <button  (click)=\"searchRiver()\" mat-button class=\"searchButton\"> Szukaj! </button> </div>\r\n\r\n<mat-tab-group class=\"mat-elevation-z2\">\r\n  <mat-tab label=\"Dane\" >\r\n      <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z2\" matSort>\r\n        <ng-container matColumnDef=\"stacja\" >\r\n          <mat-header-cell *matHeaderCellDef mat-sort-header> Stacja </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let row\"> {{row.stacja}} </mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"rzeka\" >\r\n          <mat-header-cell *matHeaderCellDef mat-sort-header> Rzeka </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let row\"> {{row.rzeka}} </mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"stan\">\r\n          <mat-header-cell *matHeaderCellDef mat-sort-header> Stan </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let row\"> {{row.stan_wody}} cm </mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"temp\">\r\n          <mat-header-cell *matHeaderCellDef mat-sort-header> Temperatura** </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let row\"> {{row.temperatura_wody}}  </mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"data\">\r\n          <mat-header-cell *matHeaderCellDef mat-sort-header> Data pomiaru </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let row\"> {{row.stan_wody_data_pomiaru}}  </mat-cell>\r\n        </ng-container>\r\n\r\n        <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n        <mat-row *matRowDef=\"let row; columns: displayedColumns;\">\r\n        </mat-row>\r\n\r\n      </table>\r\n\r\n\r\n\r\n\r\n  </mat-tab>\r\n  <mat-tab label=\"Wykres\">\r\n\r\n    <app-chart></app-chart>\r\n\r\n  </mat-tab>\r\n</mat-tab-group>\r\n\r\n\r\n\r\n\r\n\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule} from '@angular/common/http';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport {MatSortModule} from '@angular/material/sort';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {NgxEchartsModule} from 'ngx-echarts';\nimport { ChartComponent } from './chart/chart.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ChartComponent\r\n  ],\r\n    imports: [\r\n        BrowserModule,\r\n        MatFormFieldModule,\r\n        BrowserAnimationsModule,\r\n        MatInputModule,\r\n        FormsModule,\r\n        MatButtonModule,\r\n        HttpClientModule,\r\n        MatAutocompleteModule,\r\n        MatTableModule,\r\n        MatSortModule,\r\n        MatToolbarModule,\r\n        MatTabsModule,\r\n        NgxEchartsModule.forRoot({\r\n          echarts: () => import('echarts'),\r\n        }),\r\n    ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.css']\n})\nexport class ChartComponent implements OnInit {\n\n  private echartsInstance: any;\n  constructor() { }\n\n  initOpts = {\n    renderer: 'svg',\n    width: 300,\n    height: 300\n  };\n\n  options = {\n    color: ['#3398DB'],\n    tooltip: {\n      trigger: 'axis',\n      axisPointer: {\n        type: 'shadow'\n      }\n    },\n    grid: {\n      left: '3%',\n      right: '4%',\n      bottom: '3%',\n      containLabel: true\n    },\n    xAxis: [\n      {\n        type: 'category',\n        data: 'tr',\n        axisTick: {\n          alignWithLabel: true\n        }\n      }\n    ],\n    yAxis: [{\n      type: 'value'\n    }],\n    series: [{\n      name: 'Counters',\n      type: 'bar',\n      barWidth: '60%',\n      data: null,\n    }]\n  };\n  ngOnInit(): void {\n\n  }\n  onChartInit(ec) {\n    this.echartsInstance = ec;\n  }\n\n}\n","<echarts class=\"river-chart\" [initOpts]=\"initOpts\" [options]=\"options\" (chartInit)=\"onChartInit($event)\"></echarts>\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}